****Module Design****
The erc1155 module consists of two main structs: NFT and Collection.

***NFT struct:***

Represents an individual NFT token instance.
Contains fields for id (unique identifier), token_id (ID of the token type), and balance (amount of tokens owned).

**Collection struct**:

Manages the overall NFT collection, including token types, metadata, and revenue distribution.
Contains fields for id (unique identifier), mint_authority (address authorized to mint new tokens), operators (addresses authorized to deposit revenue), token_supplies (total supply tracking for each token type), token_metadata (storage for token type metadata), revenues (revenue balance tracking for each token type), and holder_balances (balance tracking for all token holders).

The module also includes a TokenMetadata struct for storing token type information such as name, description, and URI.
Function Purposes

**Access Control**:

add_operator: Allows the mint authority to add a new operator address.
remove_operator: Allows the mint authority to remove an operator address.
transfer_authority: Allows the current mint authority to transfer the role to a new address.

**Token Management**:

mint: Allows the mint authority to create new tokens with specified metadata and initial supply. Mints tokens to the specified recipient address.
transfer: Allows token holders to transfer a specified amount of tokens to another address.
merge: Allows merging two NFTs with the same token ID.

**Revenue Management**:

deposit_revenue: Allows operators to deposit revenue for a specific token type. The deposited amount is added to the token's revenue balance.
withdraw_revenue: Allows token holders to withdraw their proportional share of the revenue based on their token ownership.

**Helper Functions**:

balance: Returns the token balance of a given NFT.
token_id: Returns the token ID associated with a given NFT.
token_exists: Checks if a token exists in the collection.
is_operator: Checks if an address is registered as an operator.
total_supply: Returns the total supply of a given token.
get_metadata: Returns the metadata for a given token.
get_revenue_balance: Returns the revenue balance for a given token.

***Access Control Roles***

**Mint Authority**:

The mint authority is the address that has permission to mint new tokens.
Initially set to the address that deploys the contract (tx_context::sender(ctx) in the init function).
Can add or remove operator addresses.
Can transfer the mint authority role to another address.

**Operator**:

Operators are addresses authorized to deposit revenue for specific token types.
Added or removed by the mint authority using the add_operator and remove_operator functions.
Can deposit revenue using the deposit_revenue function.

The access control checks are performed using assertions in the respective functions. For example, the mint function verifies that the caller is the mint authority, and the deposit_revenue function verifies that the caller is a registered operator.

****Testing Approach****
The erc1155_tests module provides a comprehensive set of test cases to verify the correctness and functionality of the ERC-1155-style NFT implementation. The tests are written using the sui::test_scenario module, which allows simulating different transactions and asserting the expected behavior.
The tests cover various scenarios, including:
## Initializing the contract
## Adding and removing operators
## Minting tokens
## Transferring tokens
## Depositing and withdrawing revenue

Each test case is defined as a separate function within the erc1155_tests module. The tests use predefined test addresses (ADMIN, OPERATOR, USER1, USER2) to simulate different actors interacting with the contract.
Test Cases

**test_init**:

Tests the initialization of the contract.
Verifies that the contract is properly initialized and the is_operator function returns false for the OPERATOR address.

**test_add_operator_unauthorized**:

Tests the unauthorized addition of an operator.
Verifies that only the mint authority can add operators by expecting a failure with the ENO_MINT_AUTHORITY error code when a non-mint authority tries to add an operator.

**test_add_remove_operator**:

Tests the addition and removal of an operator.
Verifies that the mint authority can successfully add and remove an operator using the add_operator and remove_operator functions.
Asserts that the is_operator function returns the expected results after each operation.

**test_mint_success**:

Tests the successful minting of tokens.
Verifies that the mint authority can mint tokens with the specified metadata and initial supply.
Asserts that the minted NFT has the expected balance using the balance function.

**test_transfer**:

Tests the transfer of tokens between users.
Mints tokens to USER1 and then transfers a portion of the tokens to USER2.
Asserts that the balances of both users are updated correctly after the transfer.

**test_revenue_distribution**:

Tests the revenue distribution functionality.
Sets up the contract by adding an operator and minting tokens to USER1.
Deposits revenue using the deposit_revenue function called by the operator.
Allows USER1 to withdraw their share of the revenue using the withdraw_revenue function.
Verifies that the revenue withdrawal is successful.

***Running the Tests***
To run the tests, you need to have a Sui development environment set up. Here are the general steps:

Compile the erc1155 module and the erc1155_tests module using the Sui Move compiler.
Use the Sui CLI to deploy the erc1155 module to the Sui testnet.
Execute the test cases using the Sui CLI's sui move test command, specifying the erc1155_tests module.
Review the test results to ensure that all test cases pass and the expected behavior is observed.

Note: Make sure to replace the test addresses (ADMIN, OPERATOR, USER1, USER2) with valid Sui addresses before running the tests.
Conclusion
The provided test cases in the erc1155_tests module cover the essential functionality of the ERC-1155-style NFT implementation. They ensure that the contract behaves as expected in terms of access control, token minting, transfers, and revenue distribution.
By running these tests and verifying their success, you can gain confidence in the correctness and reliability of the ERC-1155-style NFT implementation on the Sui blockchain.
